// Code generated by hertz generator.

package douyinapi

import (
	"context"
	"strconv"
	"strings"
	"time"

	"mydouyin/cmd/api/biz/apimodel"
	"mydouyin/cmd/api/biz/mw"
	"mydouyin/cmd/api/biz/rpc"
	videohandel "mydouyin/cmd/api/biz/videoHandel"
	"mydouyin/kitex_gen/douyincomment"
	"mydouyin/kitex_gen/douyinfavorite"
	"mydouyin/kitex_gen/douyinuser"
	"mydouyin/kitex_gen/douyinvideo"
	"mydouyin/kitex_gen/relation"
	"mydouyin/pkg/consts"
	"mydouyin/pkg/errno"

	"github.com/cloudwego/hertz/pkg/app"
)

//	基础接口
//
// FavoriteAction
// @router /douyin/favorite/action/ [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}
	var err error
	var req apimodel.FavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		// c.String(consts.StatusBadRequest, err.Error())
		SendResponse(c, err, nil)
		return
	}
	videoId, err := strconv.Atoi(req.VideoID)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}

	resp := new(apimodel.FavoriteActionResponse)
	defer func() {
		resp.SetErr(err)
		resp.Send(c)
	}()
	err = rpc.FavoriteAction(context.Background(), &douyinfavorite.FavoriteActionRequest{
		UserId:     user.(*apimodel.User).UserID,
		VideoId:    int64(videoId),
		ActionType: req.ActionType,
	})
	if err != nil {
		return
	}
	err = errno.Success

}

// GetFavoriteList
// @router /douyin/favorite/list/ [GET]
func GetFavoriteList(ctx context.Context, c *app.RequestContext) {

	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}

	var err error
	var req apimodel.GetFavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		// c.String(consts.StatusBadRequest, err.Error())
		SendResponse(c, err, nil)
		return
	}

	resp := new(apimodel.GetFavoriteListResponse)

	defer func() {
		resp.SetErr(err)
		resp.Send(c)
	}()
	resp.VideoList, err = rpc.GetFavoriteList(context.Background(), &douyinfavorite.GetListRequest{
		UserId: user.(*apimodel.User).UserID,
	})
	if err != nil {
		return
	}
	err = errno.Success
}

// GetFeed
// @router /douyin/feed/ [GET]
func GetFeed(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	var userId int64 = -1
	if exists {
		userId = user.(*apimodel.User).UserID
	}
	var err error
	var req apimodel.GetFeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		// c.String(consts.StatusBadRequest, err.Error())
		SendResponse(c, err, nil)
		return
	}

	resp := new(apimodel.GetFeedResponse)

	defer func() {
		resp.SetErr(err)
		resp.Send(c)
	}()

	resp.VideoList, resp.NextTime, err = rpc.GetFeed(context.Background(), &douyinvideo.GetFeedRequest{
		LatestTime: req.LatestTime,
		UserId:     userId,
	})

	if err != nil {
		return
	}
	err = errno.Success
}

// GetPublishList
// @router /douyin/publish/list [GET]
func GetPublishList(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}

	var err error
	var req apimodel.GetPublishListRequest

	err = c.BindAndValidate(&req)
	if err != nil {
		// c.String(consts.StatusBadRequest, err.Error())
		SendResponse(c, err, nil)
		return
	}

	resp := new(apimodel.GetPublishListResponse)

	defer func() {
		resp.SetErr(err)
		resp.Send(c)
	}()

	resp.VideoList, err = rpc.GetPublishList(context.Background(), &douyinvideo.GetListRequest{
		UserId: user.(*apimodel.User).UserID,
	})
	if err != nil {
		return
	}
	err = errno.Success
}

// Publish Video
// @router /douyin/publish/action/ [POST]
func PublishVideo(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}
	var err error
	var req apimodel.PublishVideoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		// c.String(consts.StatusBadRequest, err.Error())
		SendResponse(c, err, nil)
		return
	}
	videourl, coverurl, err := videohandel.VH.UpLoadFile(req.Data)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}
	// hlog.Infof("上传的url为%v", videourl, coverurl)
	resp := new(apimodel.PublishVideoResponse)

	err = rpc.PublishVideo(context.Background(), &douyinvideo.CreateVideoRequest{
		Author:   user.(*apimodel.User).UserID,
		PlayUrl:  videourl,
		CoverUrl: coverurl,
		Title:    req.Title,
	})

	if err != nil {
		resp.SetErr(err)
		resp.Send(c)
	}

	resp.SetErr(errno.Success)
	resp.Send(c)
}

// CreateUser .
// @router /douyin/user/register/ [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apimodel.CreateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		// c.String(consts.StatusBadRequest, err.Error())
		SendResponse(c, err, nil)
		return
	}

	resp := new(apimodel.CreateUserResponse)

	err = rpc.CreateUser(context.Background(), &douyinuser.CreateUserRequest{
		Username: req.Username,
		Password: req.Password,
	})

	if err != nil {
		resp.SetErr(err)
		resp.Send(c)
		return
	}
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// CheckUser .
// @router /douyin/user/login/ [POST]
func CheckUser(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// GetUser .
// @router /douyin/user/ [GET]
func GetUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apimodel.GetUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}
	resp := new(apimodel.GetUserResponse)
	defer func() {
		resp.SetErr(err)
		resp.Send(c)
	}()
	id, err := strconv.Atoi(req.UserID)
	if err != nil {
		err = errno.ParamErr
		return
	}
	user, err1 := rpc.GetUser(context.Background(), &douyinuser.MGetUserRequest{UserIds: []int64{int64(id)}})
	if err1 != nil {
		err = err1
		return
	}
	resp.User = *user
	err = errno.Success
}

// CommentAction .
// @router /douyin/comment/action [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}
	var err error
	var req apimodel.CommentActionRequest
	err = c.BindAndValidate((&req))
	if err != nil {
		SendResponse(c, err, nil)
		return
	}

	resp := new(apimodel.CommentActionResponse)

	// get the content
	actionType, err := strconv.Atoi(req.ActionType)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}
	if actionType == 1 {
		// create the date
		getMonth := time.Now().Format("01")
		getDay := time.Now().Format("02")
		var build strings.Builder
		build.WriteString(getMonth)
		build.WriteString("-")
		build.WriteString(getDay)
		date := build.String()
		// create the VideoID
		videoID, err := strconv.ParseInt(req.VideoId, 10, 64)
		if err != nil {
			SendResponse(c, err, nil)
			return
		}
		id, err := rpc.CreateComment(context.Background(), &douyincomment.CreateCommentRequest{
			Video:      videoID,
			User:       user.(*apimodel.User).UserID,
			Content:    req.CommentText,
			CreateDate: date,
		})
		if err != nil {
			resp.SetErr(err)
			resp.Send(c)
		}
		resp.Comment = apimodel.Comment{
			CommentID:  id,
			Commentor:  *user.(*apimodel.User),
			Content:    req.CommentText,
			CreateDate: date,
		}
	} else {
		commentID, err := strconv.ParseInt(req.CommentId, 10, 64)
		if err != nil {
			SendResponse(c, err, nil)
			return
		}
		err = rpc.DeleteComment(context.Background(), &douyincomment.DeleteCommentRequest{
			CommentId: commentID,
		})
		if err != nil {
			resp.SetErr(err)
			resp.Send(c)
		}
	}

	resp.SetErr(errno.Success)
	resp.Send(c)

}

// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apimodel.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}
	// create the VideoID
	videoID, err := strconv.ParseInt(req.VideoId, 10, 64)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}

	resp := new(apimodel.CommentListResponse)

	defer func() {
		resp.SetErr(err)
		resp.Send(c)
	}()

	resp.CommentList, err = rpc.GetVideoComments(context.Background(), &douyincomment.GetVideoCommentsRequest{
		Video: videoID,
	})
	if err != nil {
		return
	}
	err = errno.Success
}

// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apimodel.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}
	resp := new(apimodel.RelationActionResponse)
	defer func() {
		resp.SetErr(err)
		resp.Send(c)
	}()
	user, exists := c.Get(consts.IdentityKey)
	if !exists {
		SendResponse(c, errno.AuthorizationFailedErr, nil)
		return
	}
	userId := user.(*apimodel.User).UserID
	to_user_id, err := strconv.Atoi(req.ToUserId)
	if err != nil {
		err = errno.ParamErr
		return
	}
	switch req.ActionType {
	case "1":
		err = rpc.CreateRelation(ctx, &relation.CreateRelationRequest{
			FollowId:   int64(to_user_id),
			FollowerId: userId,
		})
		if err != nil {
			return
		}
	case "2":
		err = rpc.DeleteRelation(ctx, &relation.DeleteRelationRequest{
			FollowId:   int64(to_user_id),
			FollowerId: userId,
		})
		if err != nil {
			return
		}
	default:
		err = errno.ParamErr
		return
	}
	err = errno.Success
}

// @router /douyin/relation/follow/list/ [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apimodel.FollowAndFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}
	resp := new(apimodel.FollowAndFollowerListReponse)
	defer func() {
		resp.SetErr(err)
		resp.Send(c)
	}()
	id, err := strconv.Atoi(req.UserId)
	if err != nil {
		err = errno.ParamErr
		return
	}
	users, err1 := rpc.GetFollowList(context.Background(), &relation.GetFollowListRequest{FollowerId: int64(id)})
	if err1 != nil {
		err = err1
		return
	}
	resp.UserList = users
	err = errno.Success
}

// @router /douyin/relation/follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apimodel.FollowAndFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}
	resp := new(apimodel.FollowAndFollowerListReponse)
	defer func() {
		resp.SetErr(err)
		resp.Send(c)
	}()
	id, err := strconv.Atoi(req.UserId)
	if err != nil {
		err = errno.ParamErr
		return
	}
	users, err1 := rpc.GetFollowerList(context.Background(), &relation.GetFollowerListRequest{FollowId: int64(id)})
	if err1 != nil {
		err = err1
		return
	}
	resp.UserList = users
	err = errno.Success
}
