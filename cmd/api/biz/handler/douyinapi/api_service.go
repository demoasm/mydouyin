// Code generated by hertz generator.

package douyinapi

import (
	"context"
	"strconv"

	"mydouyin/cmd/api/biz/apimodel"
	"mydouyin/cmd/api/biz/mw"
	"mydouyin/cmd/api/biz/rpc"
	"mydouyin/kitex_gen/douyinuser"
	"mydouyin/pkg/errno"

	"github.com/cloudwego/hertz/pkg/app"
)

// CreateUser .
// @router /douyin/user/register/ [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apimodel.CreateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		// c.String(consts.StatusBadRequest, err.Error())
		SendResponse(c, err, nil)
		return
	}

	resp := new(apimodel.CreateUserResponse)

	err = rpc.CreateUser(context.Background(), &douyinuser.CreateUserRequest{
		Username: req.Username,
		Password: req.Password,
	})

	if err != nil {
		resp.SetErr(err)
		resp.Send(c)
		return
	}
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// CheckUser .
// @router /douyin/user/login/ [POST]
func CheckUser(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// GetUser .
// @router /douyin/user/ [GET]
func GetUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apimodel.GetUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, err, nil)
		return
	}
	resp := new(apimodel.GetUserResponse)
	defer func() {
		resp.SetErr(err)
		resp.Send(c)
	}()
	id, err := strconv.Atoi(req.UserID)
	if err != nil {
		err = errno.ParamErr
		return
	}
	user, err1 := rpc.GetUser(context.Background(), &douyinuser.MGetUserRequest{[]int64{int64(id)}})
	if err1 != nil {
		err = err1
		return
	}
	resp.User = *user
	err = errno.Success
}
